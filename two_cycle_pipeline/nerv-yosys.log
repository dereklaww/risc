
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `nerv.yosys' --

1. Executing Verilog-2005 frontend: nerv.sv
Parsing SystemVerilog input from `nerv.sv' to AST representation.
Generating RTLIL representation for module `\nerv'.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \nerv

2.2.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:220$23'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$nerv.sv:433$94 in module nerv.
Marked 26 switch rules as full_case in process $proc$nerv.sv:220$23 in module nerv.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nerv.$proc$nerv.sv:91$119'.
     1/1: $0\rs2_value_pipeline[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:90$115'.
     1/1: $0\rs1_value_pipeline[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:444$97'.
     1/8: $0\trapped_q[0:0]
     2/8: $0\reset_q[0:0]
     3/8: $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100
     4/8: $0$memwr$\regfile$nerv.sv:457$1_DATA[31:0]$99
     5/8: $0$memwr$\regfile$nerv.sv:457$1_ADDR[4:0]$98
     6/8: $0\trapped[0:0]
     7/8: $0\pc[31:0]
     8/8: $0\x10[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:433$94'.
     1/2: $1\mem_rdata[31:0]
     2/2: $0\mem_rdata[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:220$23'.
     1/107: $1\block_ID[0:0]
     2/107: $4\stall_cond_IF[0:0]
     3/107: $5\mem_wr_enable[0:0]
     4/107: $5\mem_rd_enable[0:0]
     5/107: $12\illinsn[0:0]
     6/107: $7\next_wr[0:0]
     7/107: $14\npc[31:0]
     8/107: $4\mem_wr_enable[0:0]
     9/107: $4\mem_rd_enable[0:0]
    10/107: $11\illinsn[0:0]
    11/107: $6\next_wr[0:0]
    12/107: $5\next_rd[31:0]
    13/107: $5\next_wr[0:0]
    14/107: $10\illinsn[0:0]
    15/107: $4\next_rd[31:0]
    16/107: $4\next_wr[0:0]
    17/107: $9\illinsn[0:0]
    18/107: $4\mem_wr_strb[3:0]
    19/107: $3\mem_wr_addr[31:0]
    20/107: $3\mem_wr_strb[3:0]
    21/107: $3\mem_wr_data[31:0]
    22/107: $3\mem_wr_enable[0:0]
    23/107: $8\illinsn[0:0]
    24/107: $3\stall_cond_IF[0:0]
    25/107: $3\mem_rd_addr[31:0]
    26/107: $3\mem_rd_func[4:0]
    27/107: $3\mem_rd_reg[4:0]
    28/107: $3\mem_rd_enable[0:0]
    29/107: $13\npc[31:0]
    30/107: $7\illinsn[0:0]
    31/107: $10\j_b_check[0:0]
    32/107: $12\npc[31:0]
    33/107: $9\j_b_check[0:0]
    34/107: $11\npc[31:0]
    35/107: $8\j_b_check[0:0]
    36/107: $10\npc[31:0]
    37/107: $7\j_b_check[0:0]
    38/107: $9\npc[31:0]
    39/107: $6\j_b_check[0:0]
    40/107: $8\npc[31:0]
    41/107: $5\j_b_check[0:0]
    42/107: $7\npc[31:0]
    43/107: $4\j_b_check[0:0]
    44/107: $6\npc[31:0]
    45/107: $6\illinsn[0:0]
    46/107: $5\npc[31:0]
    47/107: $5\illinsn[0:0]
    48/107: $4\npc[31:0]
    49/107: $3\next_rd[31:0]
    50/107: $3\j_b_check[0:0]
    51/107: $3\next_wr[0:0]
    52/107: $4\illinsn[0:0]
    53/107: $3\npc[31:0]
    54/107: $3\illinsn[0:0]
    55/107: $2\next_rd[31:0]
    56/107: $2\next_wr[0:0]
    57/107: $2\stall_cond_IF[0:0]
    58/107: $2\j_b_check[0:0]
    59/107: $2\illinsn[0:0]
    60/107: $2\npc[31:0]
    61/107: $2\mem_rd_func[4:0]
    62/107: $2\mem_rd_reg[4:0]
    63/107: $2\mem_rd_addr[31:0]
    64/107: $2\mem_rd_enable[0:0]
    65/107: $2\mem_wr_strb[3:0]
    66/107: $2\mem_wr_data[31:0]
    67/107: $2\mem_wr_addr[31:0]
    68/107: $2\mem_wr_enable[0:0]
    69/107: $1\stall_cond_IF[0:0]
    70/107: $1\j_b_check[0:0]
    71/107: $1\illinsn[0:0]
    72/107: $1\next_rd[31:0]
    73/107: $1\next_wr[0:0]
    74/107: $1\npc[31:0]
    75/107: $1\mem_rd_func[4:0]
    76/107: $1\mem_rd_reg[4:0]
    77/107: $1\mem_rd_addr[31:0]
    78/107: $1\mem_rd_enable[0:0]
    79/107: $1\mem_wr_strb[3:0]
    80/107: $1\mem_wr_data[31:0]
    81/107: $1\mem_wr_addr[31:0]
    82/107: $1\mem_wr_enable[0:0]
    83/107: $2\rs1_fw[0:0]
    84/107: $2\rs2_fw[0:0]
    85/107: $1\rs2_fw[0:0]
    86/107: $1\rs1_fw[0:0]
    87/107: $2\read_en_rs1[0:0]
    88/107: $1\read_en_rs1[0:0]
    89/107: $0\block_ID[0:0]
    90/107: $0\stall_cond_IF[0:0]
    91/107: $0\illinsn[0:0]
    92/107: $0\next_wr[0:0]
    93/107: $0\npc[31:0]
    94/107: $0\mem_rd_enable[0:0]
    95/107: $0\mem_wr_enable[0:0]
    96/107: $0\j_b_check[0:0]
    97/107: $0\next_rd[31:0]
    98/107: $0\mem_rd_func[4:0]
    99/107: $0\mem_rd_reg[4:0]
   100/107: $0\mem_rd_addr[31:0]
   101/107: $0\mem_wr_strb[3:0]
   102/107: $0\mem_wr_data[31:0]
   103/107: $0\mem_wr_addr[31:0]
   104/107: $0\rs2_fw[0:0]
   105/107: $0\rs1_fw[0:0]
   106/107: $0\read_en_rs1[0:0]
   107/107: $0\read_en_rs2[0:0]
Creating decoders for process `\nerv.$proc$nerv.sv:144$12'.
     1/10: $0\stall_cond_EX[0:0]
     2/10: $0\block_EX[0:0]
     3/10: $0\rs2_value[31:0]
     4/10: $0\rs1_value[31:0]
     5/10: $0\insn_pipeline_EX[31:0]
     6/10: $0\imm_j_sext[31:0]
     7/10: $0\imm_b_sext[31:0]
     8/10: $0\imm_s_sext[31:0]
     9/10: $0\imm_i_sext[31:0]
    10/10: $0\ppc[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:81$9'.
     1/1: $0\imem_addr_q[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:56$2'.
     1/3: $0\mem_rd_func_q[4:0]
     2/3: $0\mem_rd_reg_q[4:0]
     3/3: $0\mem_rd_enable_q[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nerv.\rs2_value_pipeline' from process `\nerv.$proc$nerv.sv:91$119'.
No latch inferred for signal `\nerv.\rs1_value_pipeline' from process `\nerv.$proc$nerv.sv:90$115'.
No latch inferred for signal `\nerv.\mem_rdata' from process `\nerv.$proc$nerv.sv:433$94'.
No latch inferred for signal `\nerv.\mem_wr_enable' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_wr_addr' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_wr_data' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_wr_strb' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_rd_enable' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_rd_addr' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_rd_reg' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\mem_rd_func' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\npc' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\read_en_rs1' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\read_en_rs2' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\next_wr' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\next_rd' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\illinsn' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\j_b_check' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\rs1_fw' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\rs2_fw' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\block_ID' from process `\nerv.$proc$nerv.sv:220$23'.
No latch inferred for signal `\nerv.\stall_cond_IF' from process `\nerv.$proc$nerv.sv:220$23'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nerv.\x10' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1069' with positive edge clock.
Creating register for signal `\nerv.\pc' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1070' with positive edge clock.
Creating register for signal `\nerv.\trapped' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1071' with positive edge clock.
Creating register for signal `\nerv.\trapped_q' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1072' with positive edge clock.
Creating register for signal `\nerv.\reset_q' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1073' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:457$1_ADDR' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1074' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:457$1_DATA' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1075' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:457$1_EN' using process `\nerv.$proc$nerv.sv:444$97'.
  created $dff cell `$procdff$1076' with positive edge clock.
Creating register for signal `\nerv.\ppc' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1077' with positive edge clock.
Creating register for signal `\nerv.\insn_pipeline_EX' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1078' with positive edge clock.
Creating register for signal `\nerv.\rs1_value' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1079' with positive edge clock.
Creating register for signal `\nerv.\rs2_value' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1080' with positive edge clock.
Creating register for signal `\nerv.\imm_i_sext' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1081' with positive edge clock.
Creating register for signal `\nerv.\imm_s_sext' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1082' with positive edge clock.
Creating register for signal `\nerv.\imm_b_sext' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1083' with positive edge clock.
Creating register for signal `\nerv.\imm_j_sext' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1084' with positive edge clock.
Creating register for signal `\nerv.\block_EX' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1085' with positive edge clock.
Creating register for signal `\nerv.\stall_cond_EX' using process `\nerv.$proc$nerv.sv:144$12'.
  created $dff cell `$procdff$1086' with positive edge clock.
Creating register for signal `\nerv.\imem_addr_q' using process `\nerv.$proc$nerv.sv:81$9'.
  created $dff cell `$procdff$1087' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_enable_q' using process `\nerv.$proc$nerv.sv:56$2'.
  created $dff cell `$procdff$1088' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_reg_q' using process `\nerv.$proc$nerv.sv:56$2'.
  created $dff cell `$procdff$1089' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_func_q' using process `\nerv.$proc$nerv.sv:56$2'.
  created $dff cell `$procdff$1090' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `nerv.$proc$nerv.sv:91$119'.
Removing empty process `nerv.$proc$nerv.sv:90$115'.
Found and cleaned up 5 empty switches in `\nerv.$proc$nerv.sv:444$97'.
Removing empty process `nerv.$proc$nerv.sv:444$97'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:433$94'.
Removing empty process `nerv.$proc$nerv.sv:433$94'.
Found and cleaned up 26 empty switches in `\nerv.$proc$nerv.sv:220$23'.
Removing empty process `nerv.$proc$nerv.sv:220$23'.
Removing empty process `nerv.$proc$nerv.sv:144$12'.
Removing empty process `nerv.$proc$nerv.sv:81$9'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:56$2'.
Removing empty process `nerv.$proc$nerv.sv:56$2'.
Cleaned up 33 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 9 unused cells and 294 unused wires.
<suppressed ~11 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~615 debug messages>
Removed a total of 205 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$159: $1\stall_cond_IF[0:0] -> 1'1
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$274.
    dead port 2/2 on $mux $procmux$276.
    dead port 2/2 on $mux $procmux$292.
    dead port 2/2 on $mux $procmux$294.
    dead port 2/2 on $mux $procmux$319.
    dead port 2/2 on $mux $procmux$321.
    dead port 2/2 on $mux $procmux$330.
    dead port 2/2 on $mux $procmux$332.
    dead port 2/2 on $mux $procmux$341.
    dead port 2/2 on $mux $procmux$343.
    dead port 2/2 on $mux $procmux$352.
    dead port 2/2 on $mux $procmux$354.
    dead port 2/2 on $mux $procmux$363.
    dead port 2/2 on $mux $procmux$365.
    dead port 2/2 on $mux $procmux$375.
    dead port 2/2 on $mux $procmux$377.
    dead port 2/2 on $mux $procmux$387.
    dead port 2/2 on $mux $procmux$389.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$401.
    dead port 2/2 on $mux $procmux$411.
    dead port 1/2 on $mux $procmux$1041.
    dead port 2/2 on $mux $procmux$413.
    dead port 1/2 on $mux $procmux$1049.
    dead port 2/2 on $mux $procmux$423.
    dead port 2/2 on $mux $procmux$425.
    dead port 2/2 on $mux $procmux$436.
    dead port 2/2 on $mux $procmux$438.
    dead port 2/2 on $mux $procmux$449.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$463.
    dead port 2/2 on $mux $procmux$465.
    dead port 2/2 on $mux $procmux$467.
    dead port 2/2 on $mux $procmux$479.
    dead port 2/2 on $mux $procmux$481.
    dead port 2/2 on $mux $procmux$1062.
    dead port 2/2 on $mux $procmux$483.
    dead port 2/2 on $mux $procmux$496.
    dead port 2/2 on $mux $procmux$498.
    dead port 2/2 on $mux $procmux$500.
    dead port 2/2 on $mux $procmux$513.
    dead port 2/2 on $mux $procmux$515.
    dead port 2/2 on $mux $procmux$517.
    dead port 2/2 on $mux $procmux$531.
    dead port 2/2 on $mux $procmux$533.
    dead port 2/2 on $mux $procmux$535.
    dead port 2/2 on $mux $procmux$549.
    dead port 2/2 on $mux $procmux$551.
    dead port 2/2 on $mux $procmux$553.
    dead port 2/2 on $mux $procmux$568.
    dead port 2/2 on $mux $procmux$570.
    dead port 2/2 on $mux $procmux$572.
    dead port 2/2 on $mux $procmux$587.
    dead port 2/2 on $mux $procmux$589.
    dead port 2/2 on $mux $procmux$591.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$609.
    dead port 2/2 on $mux $procmux$611.
    dead port 2/2 on $mux $procmux$627.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$631.
    dead port 2/2 on $mux $procmux$648.
    dead port 2/2 on $mux $procmux$650.
    dead port 2/2 on $mux $procmux$652.
    dead port 2/2 on $mux $procmux$669.
    dead port 2/2 on $mux $procmux$671.
    dead port 2/2 on $mux $procmux$673.
    dead port 2/2 on $mux $procmux$689.
    dead port 2/2 on $mux $procmux$691.
    dead port 2/2 on $mux $procmux$725.
    dead port 2/2 on $mux $procmux$727.
    dead port 2/2 on $mux $procmux$739.
    dead port 2/2 on $mux $procmux$741.
    dead port 2/2 on $mux $procmux$753.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$202.
    dead port 2/2 on $mux $procmux$781.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$783.
    dead port 2/2 on $mux $procmux$795.
    dead port 2/2 on $mux $procmux$797.
    dead port 2/2 on $mux $procmux$809.
    dead port 2/2 on $mux $procmux$811.
    dead port 2/2 on $mux $procmux$823.
    dead port 2/2 on $mux $procmux$825.
    dead port 2/2 on $mux $procmux$838.
    dead port 2/2 on $mux $procmux$840.
    dead port 2/2 on $mux $procmux$853.
    dead port 2/2 on $mux $procmux$855.
    dead port 2/2 on $mux $procmux$866.
    dead port 2/2 on $mux $procmux$220.
    dead port 2/2 on $mux $procmux$222.
    dead port 2/2 on $mux $procmux$877.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$898.
    dead port 2/2 on $mux $procmux$238.
    dead port 2/2 on $mux $procmux$240.
    dead port 2/2 on $mux $procmux$912.
    dead port 2/2 on $mux $procmux$924.
    dead port 2/2 on $mux $procmux$933.
    dead port 2/2 on $mux $procmux$942.
    dead port 2/2 on $mux $procmux$951.
    dead port 2/2 on $mux $procmux$960.
    dead port 2/2 on $mux $procmux$968.
    dead port 2/2 on $mux $procmux$256.
    dead port 2/2 on $mux $procmux$976.
    dead port 2/2 on $mux $procmux$984.
    dead port 2/2 on $mux $procmux$258.
    dead port 2/2 on $mux $procmux$992.
Removed 109 multiplexer ports.
<suppressed ~34 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$307_ANY: { $procmux$255_CMP $procmux$307_CMP [1] $procmux$307_CMP [2] }
    New input vector for $reduce_or cell $procmux$374_ANY: { $procmux$252_CMP $procmux$255_CMP $procmux$374_CMP [1] $procmux$374_CMP [2] $procmux$374_CMP [4] }
    New ctrl vector for $pmux cell $procmux$264: $auto$opt_reduce.cc:132:opt_mux$1092
    New ctrl vector for $pmux cell $procmux$1059: $auto$opt_reduce.cc:132:opt_mux$1094
    New ctrl vector for $pmux cell $procmux$282: $auto$opt_reduce.cc:132:opt_mux$1096
    Consolidated identical input bits for $mux cell $procmux$123:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$123_Y
      New ports: A=1'0, B=1'1, Y=$procmux$123_Y [0]
      New connections: $procmux$123_Y [31:1] = { $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] $procmux$123_Y [0] }
    New ctrl vector for $pmux cell $procmux$718: $auto$opt_reduce.cc:132:opt_mux$1098
    New ctrl vector for $pmux cell $procmux$209: $auto$opt_reduce.cc:132:opt_mux$1100
    New ctrl vector for $pmux cell $procmux$870: { $auto$opt_reduce.cc:132:opt_mux$1102 $procmux$740_CMP $procmux$257_CMP $procmux$203_CMP }
    New ctrl vector for $pmux cell $procmux$227: $auto$opt_reduce.cc:132:opt_mux$1104
    New ctrl vector for $pmux cell $procmux$902: { $procmux$839_CMP $procmux$740_CMP $procmux$437_CMP $auto$opt_reduce.cc:132:opt_mux$1106 $procmux$309_CMP $procmux$257_CMP $procmux$203_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1091: { $procmux$194_CMP $procmux$195_CMP $procmux$199_CMP $procmux$250_CMP $procmux$251_CMP $procmux$252_CMP $procmux$253_CMP $procmux$254_CMP $procmux$255_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1093: { $procmux$1060_CMP $procmux$1061_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1095: { $procmux$194_CMP $procmux$195_CMP $procmux$199_CMP $procmux$250_CMP $procmux$251_CMP $procmux$252_CMP $procmux$253_CMP $procmux$254_CMP $procmux$255_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1097: { $procmux$250_CMP $procmux$251_CMP $procmux$252_CMP $procmux$255_CMP $procmux$304_CMP $procmux$532_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1099: { $procmux$192_CMP $procmux$193_CMP $procmux$194_CMP $procmux$195_CMP $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1101: { $procmux$839_CMP $procmux$864_CMP $procmux$865_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1103: { $procmux$192_CMP $procmux$193_CMP $procmux$194_CMP $procmux$195_CMP $procmux$196_CMP $procmux$197_CMP $procmux$198_CMP $procmux$199_CMP $procmux$200_CMP $procmux$201_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1105: { $procmux$376_CMP $procmux$864_CMP $procmux$865_CMP }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$125:
      Old ports: A=0, B=$procmux$123_Y, Y=$0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100
      New ports: A=1'0, B=$procmux$123_Y [0], Y=$0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0]
      New connections: $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [31:1] = { $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] $0$memwr$\regfile$nerv.sv:457$1_EN[31:0]$100 [0] }
  Optimizing cells in module \nerv.
Performed a total of 20 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 291 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory read port nerv.$memrd$\regfile$nerv.sv:460$110 (regfile).
Removed cell nerv.$ternary$nerv.sv:67$4 ($mux).
Removed cell nerv.$ternary$nerv.sv:68$6 ($mux).
Removed cell nerv.$ternary$nerv.sv:69$8 ($mux).
Removed top 31 bits (of 32) from port B of cell nerv.$gt$nerv.sv:146$13 ($gt).
Removed top 29 bits (of 32) from port B of cell nerv.$add$nerv.sv:222$24 ($add).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv.sv:275$32 ($sub).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:283$35 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:300$40 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:316$55 ($and).
Removed top 27 bits (of 32) from port B of cell nerv.$shl$nerv.sv:355$61 ($shl).
Removed top 27 bits (of 32) from port B of cell nerv.$shr$nerv.sv:434$96 ($shr).
Removed top 29 bits (of 32) from mux cell nerv.$ternary$nerv.sv:465$112 ($mux).
Removed top 31 bits (of 32) from port A of cell nerv.$sub$nerv.sv:465$113 ($sub).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv.sv:465$113 ($sub).
Removed cell nerv.$procmux$127 ($mux).
Removed cell nerv.$procmux$129 ($mux).
Removed cell nerv.$procmux$131 ($mux).
Removed cell nerv.$procmux$133 ($mux).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$153_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$192_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$193_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$194_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$195_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$196_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$197_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$198_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell nerv.$procmux$199_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$200_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$203_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$253_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$254_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$257_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$307_CMP1 ($eq).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$304_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$307_CMP2 ($eq).
Removed cell nerv.$procmux$306 ($mux).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$309_CMP0 ($eq).
Removed cell nerv.$procmux$308 ($mux).
Removed cell nerv.$procmux$310 ($mux).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$317 ($mux).
Removed cell nerv.$procmux$328 ($mux).
Removed cell nerv.$procmux$339 ($mux).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$374_CMP1 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$374_CMP2 ($eq).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$376_CMP0 ($eq).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$385 ($mux).
Removed cell nerv.$procmux$397 ($mux).
Removed cell nerv.$procmux$409 ($mux).
Removed cell nerv.$procmux$707 ($mux).
Removed cell nerv.$procmux$709 ($mux).
Removed cell nerv.$procmux$767 ($mux).
Removed cell nerv.$procmux$769 ($mux).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$864_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$865_CMP0 ($eq).
Removed cell nerv.$procmux$931 ($mux).
Removed cell nerv.$procmux$940 ($mux).
Removed cell nerv.$procmux$949 ($mux).
Removed cell nerv.$procmux$966 ($mux).
Removed cell nerv.$procmux$974 ($mux).
Removed cell nerv.$procmux$982 ($mux).
Removed cell nerv.$procmux$1019 ($mux).
Removed cell nerv.$procmux$1013 ($mux).
Removed cell nerv.$procmux$1016 ($mux).
Removed cell nerv.$procmux$1028 ($mux).
Removed cell nerv.$procmux$1025 ($mux).
Removed cell nerv.$procmux$1031 ($mux).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$1060_CMP0 ($eq).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$1076 ($dff).
Removed top 20 bits (of 32) from FF cell nerv.$procdff$1081 ($dff).
Removed top 20 bits (of 32) from FF cell nerv.$procdff$1082 ($dff).
Removed top 19 bits (of 32) from FF cell nerv.$procdff$1083 ($dff).
Removed top 11 bits (of 32) from FF cell nerv.$procdff$1084 ($dff).
Removed top 20 bits (of 32) from port B of cell nerv.$lt$nerv.sv:367$64 ($lt).
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:367$64_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:368$65_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:385$75_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:386$76_Y.
Removed top 29 bits (of 32) from wire nerv.$ternary$nerv.sv:465$112_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 9 cells in module nerv that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$nerv.sv:389$79 ($sshr):
    Found 3 activation_patterns using ctrl signal { $procmux$203_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    Found 1 candidates: $sshr$nerv.sv:374$71
    Analyzing resource sharing with $sshr$nerv.sv:374$71 ($sshr):
      Found 3 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
      Activation pattern for cell $sshr$nerv.sv:389$79: { $procmux$203_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $sshr$nerv.sv:389$79: { $procmux$203_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:389$79: { $procmux$203_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:374$71: { $procmux$257_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $sshr$nerv.sv:374$71: { $procmux$257_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $sshr$nerv.sv:374$71: { $procmux$257_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $sshr$nerv.sv:389$79: $auto$share.cc:986:make_cell_activation_logic$1116
      New cell: $auto$share.cc:666:make_supercell$1123 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1123 ($sshr):
    Found 6 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$203_CMP $procmux$194_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shr$nerv.sv:434$96 ($shr):
    Found 5 activation_patterns using ctrl signal { $procmux$154_CMP $procmux$153_CMP $procmux$152_CMP $procmux$151_CMP \mem_rd_enable_q }.
    Found 2 candidates: $shr$nerv.sv:388$78 $shr$nerv.sv:373$70
    Analyzing resource sharing with $shr$nerv.sv:388$78 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$154_CMP $procmux$153_CMP $procmux$152_CMP $procmux$151_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$151_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$152_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$153_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$154_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$152_CMP
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$153_CMP
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$154_CMP
      Adding exclusive control bits: $procmux$152_CMP vs. $procmux$153_CMP
      Adding exclusive control bits: $procmux$152_CMP vs. $procmux$154_CMP
      Adding exclusive control bits: $procmux$153_CMP vs. $procmux$154_CMP
      Size of SAT problem: 18 cells, 270 variables, 706 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$203_CMP $procmux$195_CMP $procmux$154_CMP $procmux$153_CMP $procmux$152_CMP $procmux$151_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q } = 10'1100001011
    Analyzing resource sharing with $shr$nerv.sv:373$70 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$154_CMP $procmux$153_CMP $procmux$152_CMP $procmux$151_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$151_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$152_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$153_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:434$96: { $procmux$154_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$152_CMP
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$153_CMP
      Adding exclusive control bits: $procmux$151_CMP vs. $procmux$154_CMP
      Adding exclusive control bits: $procmux$152_CMP vs. $procmux$153_CMP
      Adding exclusive control bits: $procmux$152_CMP vs. $procmux$154_CMP
      Adding exclusive control bits: $procmux$153_CMP vs. $procmux$154_CMP
      Size of SAT problem: 18 cells, 270 variables, 706 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $procmux$257_CMP $procmux$195_CMP $procmux$154_CMP $procmux$153_CMP $procmux$152_CMP $procmux$151_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q } = 10'1100001011
  Analyzing resource sharing options for $shr$nerv.sv:388$78 ($shr):
    Found 3 activation_patterns using ctrl signal { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    Found 1 candidates: $shr$nerv.sv:373$70
    Analyzing resource sharing with $shr$nerv.sv:373$70 ($shr):
      Found 3 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:388$78: { $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shr$nerv.sv:373$70: { $procmux$257_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv.sv:388$78: $auto$share.cc:986:make_cell_activation_logic$1130
      New cell: $auto$share.cc:666:make_supercell$1137 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1137 ($shr):
    Found 6 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$203_CMP $procmux$195_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shl$nerv.sv:384$74 ($shl):
    Found 3 activation_patterns using ctrl signal { $procmux$203_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    Found 1 candidates: $shl$nerv.sv:372$69
    Analyzing resource sharing with $shl$nerv.sv:372$69 ($shl):
      Found 3 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
      Activation pattern for cell $shl$nerv.sv:384$74: { $procmux$203_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shl$nerv.sv:384$74: { $procmux$203_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:384$74: { $procmux$203_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:372$69: { $procmux$257_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y \mem_rd_enable_q } = 4'1110
      Activation pattern for cell $shl$nerv.sv:372$69: { $procmux$257_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y } = 4'1111
      Activation pattern for cell $shl$nerv.sv:372$69: { $procmux$257_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:159$18_Y } = 4'1111
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Adding exclusive control bits: $procmux$203_CMP vs. $procmux$257_CMP
      Size of SAT problem: 15 cells, 221 variables, 574 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$nerv.sv:384$74: $auto$share.cc:986:make_cell_activation_logic$1144
      New cell: $auto$share.cc:666:make_supercell$1151 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$1151 ($shl):
    Found 6 activation_patterns using ctrl signal { $procmux$257_CMP $procmux$203_CMP $procmux$199_CMP $logic_and$nerv.sv:263$29_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:91$121 ($memrd):
    Found 1 activation_patterns using ctrl signal { $logic_not$nerv.sv:91$120_Y $and$nerv.sv:160$21_Y }.
    Found 1 candidates: $memrd$\regfile$nerv.sv:90$117
    Analyzing resource sharing with $memrd$\regfile$nerv.sv:90$117 ($memrd):
      Found 1 activation_patterns using ctrl signal { $logic_not$nerv.sv:90$116_Y $and$nerv.sv:159$18_Y }.
      Activation pattern for cell $memrd$\regfile$nerv.sv:91$121: { $logic_not$nerv.sv:91$120_Y $and$nerv.sv:160$21_Y } = 2'00
      Activation pattern for cell $memrd$\regfile$nerv.sv:90$117: { $logic_not$nerv.sv:90$116_Y $and$nerv.sv:159$18_Y } = 2'00
      Size of SAT problem: 12 cells, 127 variables, 319 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $logic_not$nerv.sv:91$120_Y $logic_not$nerv.sv:90$116_Y $and$nerv.sv:160$21_Y $and$nerv.sv:159$18_Y } = 4'0000
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:90$117 ($memrd):
    Found 1 activation_patterns using ctrl signal { $logic_not$nerv.sv:90$116_Y $and$nerv.sv:159$18_Y }.
    No candidates found.
Removing 6 cells in module nerv:
  Removing cell $shl$nerv.sv:372$69 ($shl).
  Removing cell $shl$nerv.sv:384$74 ($shl).
  Removing cell $shr$nerv.sv:373$70 ($shr).
  Removing cell $shr$nerv.sv:388$78 ($shr).
  Removing cell $sshr$nerv.sv:374$71 ($sshr).
  Removing cell $sshr$nerv.sv:389$79 ($sshr).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$428611b5d438e29cebfd18261be0c8e5ae5db6e9\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~699 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~3 debug messages>

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 75 unused wires.
<suppressed ~7 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module nerv:
  creating $macc model for $add$nerv.sv:222$24 ($add).
  creating $macc model for $add$nerv.sv:275$33 ($add).
  creating $macc model for $add$nerv.sv:282$34 ($add).
  creating $macc model for $add$nerv.sv:295$38 ($add).
  creating $macc model for $add$nerv.sv:308$44 ($add).
  creating $macc model for $add$nerv.sv:342$59 ($add).
  creating $macc model for $add$nerv.sv:382$72 ($add).
  creating $macc model for $sub$nerv.sv:275$32 ($sub).
  creating $macc model for $sub$nerv.sv:383$73 ($sub).
  creating $macc model for $sub$nerv.sv:465$113 ($sub).
  merging $macc model for $sub$nerv.sv:275$32 into $add$nerv.sv:275$33.
  creating $alu model for $macc $sub$nerv.sv:383$73.
  creating $alu model for $macc $sub$nerv.sv:465$113.
  creating $alu model for $macc $add$nerv.sv:382$72.
  creating $alu model for $macc $add$nerv.sv:342$59.
  creating $alu model for $macc $add$nerv.sv:308$44.
  creating $alu model for $macc $add$nerv.sv:295$38.
  creating $alu model for $macc $add$nerv.sv:282$34.
  creating $alu model for $macc $add$nerv.sv:222$24.
  creating $macc cell for $add$nerv.sv:275$33: $auto$alumacc.cc:354:replace_macc$1187
  creating $alu model for $ge$nerv.sv:311$49 ($ge): new $alu
  creating $alu model for $ge$nerv.sv:313$53 ($ge): merged with $sub$nerv.sv:383$73.
  creating $alu model for $gt$nerv.sv:146$13 ($gt): new $alu
  creating $alu model for $lt$nerv.sv:310$47 ($lt): merged with $ge$nerv.sv:311$49.
  creating $alu model for $lt$nerv.sv:312$51 ($lt): merged with $sub$nerv.sv:383$73.
  creating $alu model for $lt$nerv.sv:367$64 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:368$65 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:385$75 ($lt): merged with $ge$nerv.sv:311$49.
  creating $alu model for $lt$nerv.sv:386$76 ($lt): merged with $sub$nerv.sv:383$73.
  creating $alu model for $eq$nerv.sv:308$43 ($eq): merged with $sub$nerv.sv:383$73.
  creating $alu model for $ne$nerv.sv:309$45 ($ne): merged with $sub$nerv.sv:383$73.
  creating $alu cell for $lt$nerv.sv:367$64: $auto$alumacc.cc:474:replace_alu$1192
  creating $alu cell for $gt$nerv.sv:146$13: $auto$alumacc.cc:474:replace_alu$1205
  creating $alu cell for $add$nerv.sv:222$24: $auto$alumacc.cc:474:replace_alu$1212
  creating $alu cell for $add$nerv.sv:282$34: $auto$alumacc.cc:474:replace_alu$1215
  creating $alu cell for $lt$nerv.sv:368$65: $auto$alumacc.cc:474:replace_alu$1218
  creating $alu cell for $add$nerv.sv:295$38: $auto$alumacc.cc:474:replace_alu$1223
  creating $alu cell for $add$nerv.sv:308$44: $auto$alumacc.cc:474:replace_alu$1226
  creating $alu cell for $add$nerv.sv:342$59: $auto$alumacc.cc:474:replace_alu$1229
  creating $alu cell for $sub$nerv.sv:465$113: $auto$alumacc.cc:474:replace_alu$1232
  creating $alu cell for $ge$nerv.sv:311$49, $lt$nerv.sv:310$47, $lt$nerv.sv:385$75: $auto$alumacc.cc:474:replace_alu$1235
  creating $alu cell for $add$nerv.sv:382$72: $auto$alumacc.cc:474:replace_alu$1250
  creating $alu cell for $sub$nerv.sv:383$73, $ge$nerv.sv:313$53, $lt$nerv.sv:312$51, $lt$nerv.sv:386$76, $eq$nerv.sv:308$43, $ne$nerv.sv:309$45: $auto$alumacc.cc:474:replace_alu$1253
  created 12 $alu and 1 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~4 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1248: { $auto$rtlil.cc:1832:Not$1247 $auto$rtlil.cc:1835:ReduceAnd$1239 }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1145: { $auto$share.cc:976:make_cell_activation_logic$1140 [0] $auto$share.cc:976:make_cell_activation_logic$1140 [1] $auto$share.cc:976:make_cell_activation_logic$1140 [2] }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1131: { $auto$share.cc:976:make_cell_activation_logic$1126 [0] $auto$share.cc:976:make_cell_activation_logic$1126 [1] $auto$share.cc:976:make_cell_activation_logic$1126 [2] }
    New input vector for $reduce_or cell $auto$share.cc:987:make_cell_activation_logic$1117: { $auto$share.cc:976:make_cell_activation_logic$1112 [0] $auto$share.cc:976:make_cell_activation_logic$1112 [1] $auto$share.cc:976:make_cell_activation_logic$1112 [2] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1256: { $auto$alumacc.cc:490:replace_alu$1254 [0] $auto$alumacc.cc:490:replace_alu$1254 [1] $auto$alumacc.cc:490:replace_alu$1254 [2] $auto$alumacc.cc:490:replace_alu$1254 [3] $auto$alumacc.cc:490:replace_alu$1254 [4] $auto$alumacc.cc:490:replace_alu$1254 [5] $auto$alumacc.cc:490:replace_alu$1254 [6] $auto$alumacc.cc:490:replace_alu$1254 [7] $auto$alumacc.cc:490:replace_alu$1254 [8] $auto$alumacc.cc:490:replace_alu$1254 [9] $auto$alumacc.cc:490:replace_alu$1254 [10] $auto$alumacc.cc:490:replace_alu$1254 [11] $auto$alumacc.cc:490:replace_alu$1254 [12] $auto$alumacc.cc:490:replace_alu$1254 [13] $auto$alumacc.cc:490:replace_alu$1254 [14] $auto$alumacc.cc:490:replace_alu$1254 [15] $auto$alumacc.cc:490:replace_alu$1254 [16] $auto$alumacc.cc:490:replace_alu$1254 [17] $auto$alumacc.cc:490:replace_alu$1254 [18] $auto$alumacc.cc:490:replace_alu$1254 [19] $auto$alumacc.cc:490:replace_alu$1254 [20] $auto$alumacc.cc:490:replace_alu$1254 [21] $auto$alumacc.cc:490:replace_alu$1254 [22] $auto$alumacc.cc:490:replace_alu$1254 [23] $auto$alumacc.cc:490:replace_alu$1254 [24] $auto$alumacc.cc:490:replace_alu$1254 [25] $auto$alumacc.cc:490:replace_alu$1254 [26] $auto$alumacc.cc:490:replace_alu$1254 [27] $auto$alumacc.cc:490:replace_alu$1254 [28] $auto$alumacc.cc:490:replace_alu$1254 [29] $auto$alumacc.cc:490:replace_alu$1254 [30] $auto$alumacc.cc:490:replace_alu$1254 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1195: { $auto$alumacc.cc:490:replace_alu$1193 [0] $auto$alumacc.cc:490:replace_alu$1193 [1] $auto$alumacc.cc:490:replace_alu$1193 [2] $auto$alumacc.cc:490:replace_alu$1193 [3] $auto$alumacc.cc:490:replace_alu$1193 [4] $auto$alumacc.cc:490:replace_alu$1193 [5] $auto$alumacc.cc:490:replace_alu$1193 [6] $auto$alumacc.cc:490:replace_alu$1193 [7] $auto$alumacc.cc:490:replace_alu$1193 [8] $auto$alumacc.cc:490:replace_alu$1193 [9] $auto$alumacc.cc:490:replace_alu$1193 [10] $auto$alumacc.cc:490:replace_alu$1193 [11] $auto$alumacc.cc:490:replace_alu$1193 [12] $auto$alumacc.cc:490:replace_alu$1193 [13] $auto$alumacc.cc:490:replace_alu$1193 [14] $auto$alumacc.cc:490:replace_alu$1193 [15] $auto$alumacc.cc:490:replace_alu$1193 [16] $auto$alumacc.cc:490:replace_alu$1193 [17] $auto$alumacc.cc:490:replace_alu$1193 [18] $auto$alumacc.cc:490:replace_alu$1193 [19] $auto$alumacc.cc:490:replace_alu$1193 [20] $auto$alumacc.cc:490:replace_alu$1193 [21] $auto$alumacc.cc:490:replace_alu$1193 [22] $auto$alumacc.cc:490:replace_alu$1193 [23] $auto$alumacc.cc:490:replace_alu$1193 [24] $auto$alumacc.cc:490:replace_alu$1193 [25] $auto$alumacc.cc:490:replace_alu$1193 [26] $auto$alumacc.cc:490:replace_alu$1193 [27] $auto$alumacc.cc:490:replace_alu$1193 [28] $auto$alumacc.cc:490:replace_alu$1193 [29] $auto$alumacc.cc:490:replace_alu$1193 [30] $auto$alumacc.cc:490:replace_alu$1193 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1238: { $auto$alumacc.cc:490:replace_alu$1236 [0] $auto$alumacc.cc:490:replace_alu$1236 [1] $auto$alumacc.cc:490:replace_alu$1236 [2] $auto$alumacc.cc:490:replace_alu$1236 [3] $auto$alumacc.cc:490:replace_alu$1236 [4] $auto$alumacc.cc:490:replace_alu$1236 [5] $auto$alumacc.cc:490:replace_alu$1236 [6] $auto$alumacc.cc:490:replace_alu$1236 [7] $auto$alumacc.cc:490:replace_alu$1236 [8] $auto$alumacc.cc:490:replace_alu$1236 [9] $auto$alumacc.cc:490:replace_alu$1236 [10] $auto$alumacc.cc:490:replace_alu$1236 [11] $auto$alumacc.cc:490:replace_alu$1236 [12] $auto$alumacc.cc:490:replace_alu$1236 [13] $auto$alumacc.cc:490:replace_alu$1236 [14] $auto$alumacc.cc:490:replace_alu$1236 [15] $auto$alumacc.cc:490:replace_alu$1236 [16] $auto$alumacc.cc:490:replace_alu$1236 [17] $auto$alumacc.cc:490:replace_alu$1236 [18] $auto$alumacc.cc:490:replace_alu$1236 [19] $auto$alumacc.cc:490:replace_alu$1236 [20] $auto$alumacc.cc:490:replace_alu$1236 [21] $auto$alumacc.cc:490:replace_alu$1236 [22] $auto$alumacc.cc:490:replace_alu$1236 [23] $auto$alumacc.cc:490:replace_alu$1236 [24] $auto$alumacc.cc:490:replace_alu$1236 [25] $auto$alumacc.cc:490:replace_alu$1236 [26] $auto$alumacc.cc:490:replace_alu$1236 [27] $auto$alumacc.cc:490:replace_alu$1236 [28] $auto$alumacc.cc:490:replace_alu$1236 [29] $auto$alumacc.cc:490:replace_alu$1236 [30] $auto$alumacc.cc:490:replace_alu$1236 [31] }
  Optimizing cells in module \nerv.
Performed a total of 7 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 13 unused wires.
<suppressed ~3 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\regfile$nerv.sv:457$114' in module `\nerv': merged $dff to cell.
Checking cell `$memrd$\regfile$nerv.sv:460$110' in module `\nerv': merged data $dff with rd enable to cell.
Checking cell `$memrd$\regfile$nerv.sv:90$117' in module `\nerv': no (compatible) $dff found.
Checking cell `$memrd$\regfile$nerv.sv:91$121' in module `\nerv': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 9 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\nerv':
  $memwr$\regfile$nerv.sv:457$114 ($memwr)
  $memrd$\regfile$nerv.sv:460$110 ($memrd)
  $memrd$\regfile$nerv.sv:90$117 ($memrd)
  $memrd$\regfile$nerv.sv:91$121 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing nerv.regfile:
  Properties: ports=4 bits=1024 rports=3 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Bram port A1.2 has incompatible clock type.
        Failed to map read port #1.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Bram port A1.2 has incompatible clock type.
        Failed to map read port #1.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain !~async~.
        Bram port A1.2 has incompatible clock type.
        Failed to map read port #1.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~60 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 35 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \regfile in module \nerv:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 1 $dff and 93 $mux cells.
  write interface: 32 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~41 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$374_ANY: { $3\j_b_check[0:0] $procmux$252_CMP $procmux$374_CMP [1] $procmux$374_CMP [2] $procmux$374_CMP [4] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1097: { $3\j_b_check[0:0] $procmux$250_CMP $procmux$251_CMP $procmux$252_CMP $procmux$304_CMP $procmux$532_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1095: { $3\j_b_check[0:0] $procmux$194_CMP $procmux$195_CMP $procmux$199_CMP $procmux$250_CMP $procmux$251_CMP $procmux$252_CMP $procmux$253_CMP $procmux$254_CMP }
    Consolidated identical input bits for $pmux cell $procmux$150:
      Old ports: A=$shr$nerv.sv:434$96_Y, B={ $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7:0] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15:0] 24'000000000000000000000000 $shr$nerv.sv:434$96_Y [7:0] 16'0000000000000000 $shr$nerv.sv:434$96_Y [15:0] }, Y=\mem_rdata
      New ports: A=$shr$nerv.sv:434$96_Y [31:8], B={ $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [7] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15] $shr$nerv.sv:434$96_Y [15:8] 40'0000000000000000000000000000000000000000 $shr$nerv.sv:434$96_Y [15:8] }, Y=\mem_rdata [31:8]
      New connections: \mem_rdata [7:0] = $shr$nerv.sv:434$96_Y [7:0]
    Consolidated identical input bits for $pmux cell $procmux$303:
      Old ports: A=4'1111, B=8'00010011, Y=$4\mem_wr_strb[3:0]
      New ports: A=2'11, B=4'0001, Y=$4\mem_wr_strb[3:0] [2:1]
      New connections: { $4\mem_wr_strb[3:0] [3] $4\mem_wr_strb[3:0] [0] } = { $4\mem_wr_strb[3:0] [2] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$434:
      Old ports: A=$6\npc[31:0], B={ $6\npc[31:0] [31:2] 2'00 }, Y=$13\npc[31:0]
      New ports: A=$6\npc[31:0] [1:0], B=2'00, Y=$13\npc[31:0] [1:0]
      New connections: $13\npc[31:0] [31:2] = $6\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$737:
      Old ports: A=$4\npc[31:0], B={ $4\npc[31:0] [31:2] 2'00 }, Y=$5\npc[31:0]
      New ports: A=$4\npc[31:0] [1:0], B=2'00, Y=$5\npc[31:0] [1:0]
      New connections: $5\npc[31:0] [31:2] = $4\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$836:
      Old ports: A=$add$nerv.sv:282$34_Y, B={ $add$nerv.sv:282$34_Y [31:2] 2'00 }, Y=$3\npc[31:0]
      New ports: A=$add$nerv.sv:282$34_Y [1:0], B=2'00, Y=$3\npc[31:0] [1:0]
      New connections: $3\npc[31:0] [31:2] = $add$nerv.sv:282$34_Y [31:2]
    Consolidated identical input bits for $mux cell $ternary$nerv.sv:465$112:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:455:run$1111 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1111 [2]
      New connections: $auto$wreduce.cc:455:run$1111 [1:0] = 2'00
  Optimizing cells in module \nerv.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 164 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper maccmap for cells of type $macc.
  add { \insn_pipeline_EX [31:12] 12'000000000000 } (32 bits, unsigned)
  add \pc (32 bits, unsigned)
  add 32'11111111111111111111111111111100 (32 bits, unsigned)
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
Creating constmapped module `$paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~348 debug messages>

2.30.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~288 debug messages>
Removed 0 unused cells and 13 unused wires.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$constmap:6e3026a439ed4a6e7983ca0e910890cc59b2f7b2$paramod$639848c0e6c2f57a2478574ca6c566bbce1f0807\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=4 for cells of type $pmux.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~758 debug messages>

2.30.28. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~352 debug messages>
Removed 0 unused cells and 15 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=12\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1325 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~1441 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~2460 debug messages>
Removed a total of 820 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$10335 ($_DFF_P_) from module nerv.
Replaced 1 DFF cells.

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 281 unused cells and 1116 unused wires.
<suppressed ~282 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1205.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1205.BB [0]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1215.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1226.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[10].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [10]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [11]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [12]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [13]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [14]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [15]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [16]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [17]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [18]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [19]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [1]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [20]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [21]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [22]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [23]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [24]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [25]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [26]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [27]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [28]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [29]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [30]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[3].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [3]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[4].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [4]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [5]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[6].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [6]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[7].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [7]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[8].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [8]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[9].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.C [9]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2254.slice[0].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1215.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1226.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[0].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[10].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[11].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[12].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[13].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[14].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[15].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[16].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[17].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[18].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[19].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[20].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[21].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[22].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[23].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[24].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[25].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[26].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[27].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[28].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[29].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[30].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[31].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[4].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[5].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[6].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[7].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[8].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[9].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2254.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~487 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 138 unused wires.
<suppressed ~3 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[2].carry: CO=$auto$alumacc.cc:474:replace_alu$1232.BB [2]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2254.slice[1].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1232.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2254.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[2].carry: CO=\pc [2]
Optimized away SB_CARRY cell nerv.$auto$maccmap.cc:240:synth$2254.slice[2].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$1212.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$maccmap.cc:240:synth$2254.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~24 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 7 unused wires.
<suppressed ~2 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.31.30. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module nerv:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10048 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [0] -> \regfile[5] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10049 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [1] -> \regfile[5] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10050 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [2] -> \regfile[5] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10051 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [3] -> \regfile[5] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10052 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [4] -> \regfile[5] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10053 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [5] -> \regfile[5] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10054 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [6] -> \regfile[5] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10055 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [7] -> \regfile[5] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10056 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [8] -> \regfile[5] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10057 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [9] -> \regfile[5] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10058 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [10] -> \regfile[5] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10059 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [11] -> \regfile[5] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10060 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [12] -> \regfile[5] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10061 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [13] -> \regfile[5] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10062 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [14] -> \regfile[5] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10063 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [15] -> \regfile[5] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10064 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [16] -> \regfile[5] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10065 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [17] -> \regfile[5] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10066 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [18] -> \regfile[5] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10067 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [19] -> \regfile[5] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10068 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [20] -> \regfile[5] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10069 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [21] -> \regfile[5] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10070 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [22] -> \regfile[5] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10071 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [23] -> \regfile[5] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10072 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [24] -> \regfile[5] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10073 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [25] -> \regfile[5] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10074 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [26] -> \regfile[5] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10075 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [27] -> \regfile[5] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10076 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [28] -> \regfile[5] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10077 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [29] -> \regfile[5] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10078 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [30] -> \regfile[5] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10079 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1714 [31] -> \regfile[5] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10104 to $_DFFE_PP_ for $0\pc[31:0] [0] -> \pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10105 to $_DFFE_PP_ for $0\pc[31:0] [1] -> \pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10106 to $_DFFE_PP_ for $0\pc[31:0] [2] -> \pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10107 to $_DFFE_PP_ for $0\pc[31:0] [3] -> \pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10108 to $_DFFE_PP_ for $0\pc[31:0] [4] -> \pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10109 to $_DFFE_PP_ for $0\pc[31:0] [5] -> \pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10110 to $_DFFE_PP_ for $0\pc[31:0] [6] -> \pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10111 to $_DFFE_PP_ for $0\pc[31:0] [7] -> \pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10112 to $_DFFE_PP_ for $0\pc[31:0] [8] -> \pc [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10113 to $_DFFE_PP_ for $0\pc[31:0] [9] -> \pc [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10114 to $_DFFE_PP_ for $0\pc[31:0] [10] -> \pc [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10115 to $_DFFE_PP_ for $0\pc[31:0] [11] -> \pc [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10116 to $_DFFE_PP_ for $0\pc[31:0] [12] -> \pc [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10117 to $_DFFE_PP_ for $0\pc[31:0] [13] -> \pc [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10118 to $_DFFE_PP_ for $0\pc[31:0] [14] -> \pc [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10119 to $_DFFE_PP_ for $0\pc[31:0] [15] -> \pc [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10120 to $_DFFE_PP_ for $0\pc[31:0] [16] -> \pc [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10121 to $_DFFE_PP_ for $0\pc[31:0] [17] -> \pc [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10122 to $_DFFE_PP_ for $0\pc[31:0] [18] -> \pc [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10123 to $_DFFE_PP_ for $0\pc[31:0] [19] -> \pc [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10124 to $_DFFE_PP_ for $0\pc[31:0] [20] -> \pc [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10125 to $_DFFE_PP_ for $0\pc[31:0] [21] -> \pc [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10126 to $_DFFE_PP_ for $0\pc[31:0] [22] -> \pc [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10127 to $_DFFE_PP_ for $0\pc[31:0] [23] -> \pc [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10128 to $_DFFE_PP_ for $0\pc[31:0] [24] -> \pc [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10129 to $_DFFE_PP_ for $0\pc[31:0] [25] -> \pc [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10130 to $_DFFE_PP_ for $0\pc[31:0] [26] -> \pc [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10131 to $_DFFE_PP_ for $0\pc[31:0] [27] -> \pc [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10132 to $_DFFE_PP_ for $0\pc[31:0] [28] -> \pc [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10133 to $_DFFE_PP_ for $0\pc[31:0] [29] -> \pc [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10134 to $_DFFE_PP_ for $0\pc[31:0] [30] -> \pc [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10135 to $_DFFE_PP_ for $0\pc[31:0] [31] -> \pc [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10136 to $_DFFE_PP_ for $0\trapped[0:0] -> \trapped.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10138 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [0] -> \regfile[19] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10139 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [1] -> \regfile[19] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10140 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [2] -> \regfile[19] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10141 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [3] -> \regfile[19] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10142 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [4] -> \regfile[19] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10143 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [5] -> \regfile[19] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10144 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [6] -> \regfile[19] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10145 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [7] -> \regfile[19] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10146 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [8] -> \regfile[19] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10147 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [9] -> \regfile[19] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10148 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [10] -> \regfile[19] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10149 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [11] -> \regfile[19] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10150 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [12] -> \regfile[19] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10151 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [13] -> \regfile[19] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10152 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [14] -> \regfile[19] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10153 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [15] -> \regfile[19] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10154 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [16] -> \regfile[19] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10155 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [17] -> \regfile[19] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10156 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [18] -> \regfile[19] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10157 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [19] -> \regfile[19] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10158 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [20] -> \regfile[19] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10159 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [21] -> \regfile[19] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10160 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [22] -> \regfile[19] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10161 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [23] -> \regfile[19] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10162 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [24] -> \regfile[19] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10163 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [25] -> \regfile[19] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10164 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [26] -> \regfile[19] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10165 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [27] -> \regfile[19] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10166 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [28] -> \regfile[19] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10167 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [29] -> \regfile[19] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10168 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [30] -> \regfile[19] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$10169 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1812 [31] -> \regfile[19] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2047 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [0] -> \regfile[24] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2048 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [1] -> \regfile[24] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2049 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [2] -> \regfile[24] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2050 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [3] -> \regfile[24] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2051 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [4] -> \regfile[24] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2052 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [5] -> \regfile[24] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2053 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [6] -> \regfile[24] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2054 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [7] -> \regfile[24] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2055 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [8] -> \regfile[24] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2056 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [9] -> \regfile[24] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2057 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [10] -> \regfile[24] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2058 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [11] -> \regfile[24] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2059 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [12] -> \regfile[24] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2060 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [13] -> \regfile[24] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2061 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [14] -> \regfile[24] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2062 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [15] -> \regfile[24] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2063 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [16] -> \regfile[24] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2064 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [17] -> \regfile[24] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2065 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [18] -> \regfile[24] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2066 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [19] -> \regfile[24] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2067 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [20] -> \regfile[24] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2068 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [21] -> \regfile[24] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2069 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [22] -> \regfile[24] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2070 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [23] -> \regfile[24] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2071 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [24] -> \regfile[24] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2072 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [25] -> \regfile[24] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2073 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [26] -> \regfile[24] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2074 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [27] -> \regfile[24] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2075 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [28] -> \regfile[24] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2076 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [29] -> \regfile[24] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2077 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [30] -> \regfile[24] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2078 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1848 [31] -> \regfile[24] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2079 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [0] -> \regfile[23] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2080 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [1] -> \regfile[23] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2081 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [2] -> \regfile[23] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2082 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [3] -> \regfile[23] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2083 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [4] -> \regfile[23] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2084 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [5] -> \regfile[23] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2085 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [6] -> \regfile[23] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2086 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [7] -> \regfile[23] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2087 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [8] -> \regfile[23] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2088 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [9] -> \regfile[23] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2089 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [10] -> \regfile[23] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2090 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [11] -> \regfile[23] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2091 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [12] -> \regfile[23] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2092 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [13] -> \regfile[23] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2093 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [14] -> \regfile[23] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2094 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [15] -> \regfile[23] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2095 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [16] -> \regfile[23] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2096 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [17] -> \regfile[23] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2097 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [18] -> \regfile[23] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2098 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [19] -> \regfile[23] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2099 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [20] -> \regfile[23] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2100 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [21] -> \regfile[23] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2101 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [22] -> \regfile[23] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2102 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [23] -> \regfile[23] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2103 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [24] -> \regfile[23] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2104 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [25] -> \regfile[23] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2105 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [26] -> \regfile[23] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2106 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [27] -> \regfile[23] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2107 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [28] -> \regfile[23] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2108 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [29] -> \regfile[23] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2109 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [30] -> \regfile[23] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2110 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1838 [31] -> \regfile[23] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2210 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [0] -> \regfile[28] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2211 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [1] -> \regfile[28] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2212 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [2] -> \regfile[28] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2213 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [3] -> \regfile[28] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2214 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [4] -> \regfile[28] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2215 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [5] -> \regfile[28] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2216 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [6] -> \regfile[28] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2217 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [7] -> \regfile[28] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2218 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [8] -> \regfile[28] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2219 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [9] -> \regfile[28] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2220 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [10] -> \regfile[28] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2221 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [11] -> \regfile[28] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2222 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [12] -> \regfile[28] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2223 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [13] -> \regfile[28] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2224 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [14] -> \regfile[28] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2225 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [15] -> \regfile[28] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2226 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [16] -> \regfile[28] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2227 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [17] -> \regfile[28] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2228 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [18] -> \regfile[28] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2229 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [19] -> \regfile[28] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2230 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [20] -> \regfile[28] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2231 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [21] -> \regfile[28] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2232 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [22] -> \regfile[28] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2233 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [23] -> \regfile[28] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2234 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [24] -> \regfile[28] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2235 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [25] -> \regfile[28] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2236 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [26] -> \regfile[28] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2237 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [27] -> \regfile[28] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2238 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [28] -> \regfile[28] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2239 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [29] -> \regfile[28] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2240 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [30] -> \regfile[28] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2241 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1874 [31] -> \regfile[28] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2651 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [0] -> \regfile[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2652 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [1] -> \regfile[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2653 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [2] -> \regfile[3] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2654 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [3] -> \regfile[3] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2655 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [4] -> \regfile[3] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2656 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [5] -> \regfile[3] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2657 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [6] -> \regfile[3] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2658 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [7] -> \regfile[3] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2659 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [8] -> \regfile[3] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2660 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [9] -> \regfile[3] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2661 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [10] -> \regfile[3] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2662 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [11] -> \regfile[3] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2663 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [12] -> \regfile[3] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2664 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [13] -> \regfile[3] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2665 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [14] -> \regfile[3] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2666 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [15] -> \regfile[3] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2667 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [16] -> \regfile[3] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2668 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [17] -> \regfile[3] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2669 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [18] -> \regfile[3] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2670 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [19] -> \regfile[3] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2671 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [20] -> \regfile[3] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2672 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [21] -> \regfile[3] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2673 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [22] -> \regfile[3] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2674 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [23] -> \regfile[3] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2675 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [24] -> \regfile[3] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2676 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [25] -> \regfile[3] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2677 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [26] -> \regfile[3] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2678 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [27] -> \regfile[3] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2679 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [28] -> \regfile[3] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2680 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [29] -> \regfile[3] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2681 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [30] -> \regfile[3] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2682 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1698 [31] -> \regfile[3] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2683 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [0] -> \regfile[27] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2684 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [1] -> \regfile[27] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2685 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [2] -> \regfile[27] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2686 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [3] -> \regfile[27] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2687 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [4] -> \regfile[27] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2688 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [5] -> \regfile[27] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2689 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [6] -> \regfile[27] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2690 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [7] -> \regfile[27] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2691 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [8] -> \regfile[27] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2692 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [9] -> \regfile[27] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2693 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [10] -> \regfile[27] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2694 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [11] -> \regfile[27] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2695 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [12] -> \regfile[27] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2696 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [13] -> \regfile[27] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2697 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [14] -> \regfile[27] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2698 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [15] -> \regfile[27] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2699 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [16] -> \regfile[27] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2700 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [17] -> \regfile[27] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2701 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [18] -> \regfile[27] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2702 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [19] -> \regfile[27] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2703 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [20] -> \regfile[27] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2704 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [21] -> \regfile[27] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2705 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [22] -> \regfile[27] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2706 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [23] -> \regfile[27] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2707 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [24] -> \regfile[27] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2708 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [25] -> \regfile[27] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2709 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [26] -> \regfile[27] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2710 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [27] -> \regfile[27] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2711 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [28] -> \regfile[27] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2712 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [29] -> \regfile[27] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2713 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [30] -> \regfile[27] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2714 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1866 [31] -> \regfile[27] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2715 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [0] -> \regfile[6] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2716 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [1] -> \regfile[6] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2717 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [2] -> \regfile[6] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2718 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [3] -> \regfile[6] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2719 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [4] -> \regfile[6] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2720 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [5] -> \regfile[6] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2721 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [6] -> \regfile[6] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2722 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [7] -> \regfile[6] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2723 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [8] -> \regfile[6] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2724 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [9] -> \regfile[6] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2725 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [10] -> \regfile[6] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2726 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [11] -> \regfile[6] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2727 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [12] -> \regfile[6] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2728 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [13] -> \regfile[6] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2729 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [14] -> \regfile[6] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2730 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [15] -> \regfile[6] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2731 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [16] -> \regfile[6] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2732 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [17] -> \regfile[6] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2733 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [18] -> \regfile[6] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2734 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [19] -> \regfile[6] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2735 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [20] -> \regfile[6] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2736 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [21] -> \regfile[6] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2737 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [22] -> \regfile[6] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2738 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [23] -> \regfile[6] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2739 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [24] -> \regfile[6] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2740 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [25] -> \regfile[6] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2741 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [26] -> \regfile[6] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2742 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [27] -> \regfile[6] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2743 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [28] -> \regfile[6] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2744 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [29] -> \regfile[6] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2745 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [30] -> \regfile[6] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2746 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1720 [31] -> \regfile[6] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2747 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [0] -> \regfile[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2748 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [1] -> \regfile[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2749 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [2] -> \regfile[2] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2750 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [3] -> \regfile[2] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2751 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [4] -> \regfile[2] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2752 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [5] -> \regfile[2] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2753 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [6] -> \regfile[2] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2754 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [7] -> \regfile[2] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2755 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [8] -> \regfile[2] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2756 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [9] -> \regfile[2] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2757 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [10] -> \regfile[2] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2758 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [11] -> \regfile[2] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2759 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [12] -> \regfile[2] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2760 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [13] -> \regfile[2] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2761 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [14] -> \regfile[2] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2762 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [15] -> \regfile[2] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2763 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [16] -> \regfile[2] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2764 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [17] -> \regfile[2] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2765 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [18] -> \regfile[2] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2766 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [19] -> \regfile[2] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2767 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [20] -> \regfile[2] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2768 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [21] -> \regfile[2] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2769 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [22] -> \regfile[2] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2770 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [23] -> \regfile[2] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2771 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [24] -> \regfile[2] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2772 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [25] -> \regfile[2] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2773 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [26] -> \regfile[2] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2774 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [27] -> \regfile[2] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2775 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [28] -> \regfile[2] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2776 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [29] -> \regfile[2] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2777 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [30] -> \regfile[2] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2778 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1690 [31] -> \regfile[2] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2781 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [0] -> \regfile[18] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2782 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [1] -> \regfile[18] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2783 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [2] -> \regfile[18] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2784 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [3] -> \regfile[18] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2785 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [4] -> \regfile[18] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2786 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [5] -> \regfile[18] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2787 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [6] -> \regfile[18] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2788 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [7] -> \regfile[18] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2789 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [8] -> \regfile[18] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2790 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [9] -> \regfile[18] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2791 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [10] -> \regfile[18] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2792 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [11] -> \regfile[18] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2793 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [12] -> \regfile[18] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2794 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [13] -> \regfile[18] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2795 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [14] -> \regfile[18] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2796 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [15] -> \regfile[18] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2797 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [16] -> \regfile[18] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2798 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [17] -> \regfile[18] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2799 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [18] -> \regfile[18] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2800 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [19] -> \regfile[18] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2801 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [20] -> \regfile[18] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2802 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [21] -> \regfile[18] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2803 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [22] -> \regfile[18] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2804 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [23] -> \regfile[18] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2805 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [24] -> \regfile[18] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2806 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [25] -> \regfile[18] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2807 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [26] -> \regfile[18] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2808 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [27] -> \regfile[18] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2809 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [28] -> \regfile[18] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2810 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [29] -> \regfile[18] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2811 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [30] -> \regfile[18] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2812 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1806 [31] -> \regfile[18] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2813 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [0] -> \regfile[21] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2814 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [1] -> \regfile[21] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2815 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [2] -> \regfile[21] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2816 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [3] -> \regfile[21] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2817 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [4] -> \regfile[21] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2818 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [5] -> \regfile[21] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2819 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [6] -> \regfile[21] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2820 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [7] -> \regfile[21] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2821 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [8] -> \regfile[21] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2822 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [9] -> \regfile[21] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2823 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [10] -> \regfile[21] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2824 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [11] -> \regfile[21] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2825 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [12] -> \regfile[21] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2826 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [13] -> \regfile[21] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2827 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [14] -> \regfile[21] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2828 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [15] -> \regfile[21] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2829 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [16] -> \regfile[21] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2830 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [17] -> \regfile[21] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2831 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [18] -> \regfile[21] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2832 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [19] -> \regfile[21] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2833 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [20] -> \regfile[21] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2834 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [21] -> \regfile[21] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2835 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [22] -> \regfile[21] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2836 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [23] -> \regfile[21] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2837 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [24] -> \regfile[21] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2838 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [25] -> \regfile[21] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2839 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [26] -> \regfile[21] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2840 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [27] -> \regfile[21] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2841 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [28] -> \regfile[21] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2842 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [29] -> \regfile[21] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2843 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [30] -> \regfile[21] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2844 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1826 [31] -> \regfile[21] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2845 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [0] -> \regfile[25] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2846 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [1] -> \regfile[25] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2847 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [2] -> \regfile[25] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2848 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [3] -> \regfile[25] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2849 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [4] -> \regfile[25] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2850 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [5] -> \regfile[25] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2851 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [6] -> \regfile[25] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2852 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [7] -> \regfile[25] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2853 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [8] -> \regfile[25] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2854 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [9] -> \regfile[25] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2855 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [10] -> \regfile[25] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2856 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [11] -> \regfile[25] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2857 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [12] -> \regfile[25] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2858 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [13] -> \regfile[25] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2859 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [14] -> \regfile[25] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2860 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [15] -> \regfile[25] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2861 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [16] -> \regfile[25] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2862 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [17] -> \regfile[25] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2863 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [18] -> \regfile[25] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2864 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [19] -> \regfile[25] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2865 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [20] -> \regfile[25] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2866 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [21] -> \regfile[25] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2867 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [22] -> \regfile[25] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2868 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [23] -> \regfile[25] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2869 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [24] -> \regfile[25] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2870 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [25] -> \regfile[25] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2871 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [26] -> \regfile[25] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2872 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [27] -> \regfile[25] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2873 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [28] -> \regfile[25] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2874 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [29] -> \regfile[25] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2875 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [30] -> \regfile[25] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2876 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1854 [31] -> \regfile[25] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2877 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [0] -> \regfile[17] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2878 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [1] -> \regfile[17] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2879 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [2] -> \regfile[17] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2880 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [3] -> \regfile[17] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2881 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [4] -> \regfile[17] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2882 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [5] -> \regfile[17] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2883 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [6] -> \regfile[17] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2884 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [7] -> \regfile[17] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2885 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [8] -> \regfile[17] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2886 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [9] -> \regfile[17] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2887 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [10] -> \regfile[17] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2888 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [11] -> \regfile[17] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2889 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [12] -> \regfile[17] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2890 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [13] -> \regfile[17] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2891 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [14] -> \regfile[17] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2892 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [15] -> \regfile[17] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2893 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [16] -> \regfile[17] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2894 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [17] -> \regfile[17] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2895 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [18] -> \regfile[17] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2896 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [19] -> \regfile[17] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2897 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [20] -> \regfile[17] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2898 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [21] -> \regfile[17] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2899 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [22] -> \regfile[17] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2900 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [23] -> \regfile[17] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2901 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [24] -> \regfile[17] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2902 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [25] -> \regfile[17] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2903 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [26] -> \regfile[17] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2904 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [27] -> \regfile[17] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2905 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [28] -> \regfile[17] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2906 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [29] -> \regfile[17] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2907 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [30] -> \regfile[17] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2908 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1800 [31] -> \regfile[17] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2909 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [0] -> \regfile[13] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2910 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [1] -> \regfile[13] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2911 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [2] -> \regfile[13] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2912 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [3] -> \regfile[13] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2913 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [4] -> \regfile[13] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2914 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [5] -> \regfile[13] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2915 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [6] -> \regfile[13] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2916 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [7] -> \regfile[13] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2917 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [8] -> \regfile[13] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2918 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [9] -> \regfile[13] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2919 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [10] -> \regfile[13] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2920 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [11] -> \regfile[13] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2921 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [12] -> \regfile[13] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2922 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [13] -> \regfile[13] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2923 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [14] -> \regfile[13] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2924 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [15] -> \regfile[13] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2925 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [16] -> \regfile[13] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2926 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [17] -> \regfile[13] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2927 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [18] -> \regfile[13] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2928 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [19] -> \regfile[13] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2929 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [20] -> \regfile[13] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2930 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [21] -> \regfile[13] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2931 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [22] -> \regfile[13] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2932 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [23] -> \regfile[13] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2933 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [24] -> \regfile[13] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2934 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [25] -> \regfile[13] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2935 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [26] -> \regfile[13] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2936 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [27] -> \regfile[13] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2937 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [28] -> \regfile[13] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2938 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [29] -> \regfile[13] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2939 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [30] -> \regfile[13] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2940 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1770 [31] -> \regfile[13] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2941 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [0] -> \regfile[7] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2942 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [1] -> \regfile[7] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2943 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [2] -> \regfile[7] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2944 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [3] -> \regfile[7] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2945 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [4] -> \regfile[7] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2946 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [5] -> \regfile[7] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2947 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [6] -> \regfile[7] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2948 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [7] -> \regfile[7] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2949 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [8] -> \regfile[7] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2950 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [9] -> \regfile[7] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2951 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [10] -> \regfile[7] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2952 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [11] -> \regfile[7] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2953 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [12] -> \regfile[7] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2954 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [13] -> \regfile[7] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2955 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [14] -> \regfile[7] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2956 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [15] -> \regfile[7] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2957 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [16] -> \regfile[7] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2958 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [17] -> \regfile[7] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2959 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [18] -> \regfile[7] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2960 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [19] -> \regfile[7] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2961 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [20] -> \regfile[7] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2962 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [21] -> \regfile[7] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2963 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [22] -> \regfile[7] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2964 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [23] -> \regfile[7] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2965 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [24] -> \regfile[7] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2966 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [25] -> \regfile[7] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2967 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [26] -> \regfile[7] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2968 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [27] -> \regfile[7] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2969 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [28] -> \regfile[7] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2970 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [29] -> \regfile[7] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2971 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [30] -> \regfile[7] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2972 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1726 [31] -> \regfile[7] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3030 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [0] -> \regfile[31] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3031 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [1] -> \regfile[31] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3032 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [2] -> \regfile[31] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3033 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [3] -> \regfile[31] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3034 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [4] -> \regfile[31] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3035 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [5] -> \regfile[31] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3036 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [6] -> \regfile[31] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3037 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [7] -> \regfile[31] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3038 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [8] -> \regfile[31] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3039 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [9] -> \regfile[31] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3040 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [10] -> \regfile[31] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3041 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [11] -> \regfile[31] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3042 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [12] -> \regfile[31] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3043 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [13] -> \regfile[31] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3044 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [14] -> \regfile[31] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3045 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [15] -> \regfile[31] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3046 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [16] -> \regfile[31] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3047 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [17] -> \regfile[31] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3048 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [18] -> \regfile[31] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3049 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [19] -> \regfile[31] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3050 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [20] -> \regfile[31] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3051 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [21] -> \regfile[31] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3052 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [22] -> \regfile[31] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3053 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [23] -> \regfile[31] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3054 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [24] -> \regfile[31] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3055 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [25] -> \regfile[31] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3056 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [26] -> \regfile[31] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3057 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [27] -> \regfile[31] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3058 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [28] -> \regfile[31] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3059 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [29] -> \regfile[31] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3060 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [30] -> \regfile[31] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3061 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1892 [31] -> \regfile[31] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3062 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [0] -> \x10 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3063 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [1] -> \x10 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3064 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [2] -> \x10 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3065 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [3] -> \x10 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3066 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [4] -> \x10 [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3067 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [5] -> \x10 [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3068 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [6] -> \x10 [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3069 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [7] -> \x10 [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3070 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [8] -> \x10 [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3071 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [9] -> \x10 [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3072 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [10] -> \x10 [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3073 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [11] -> \x10 [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3074 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [12] -> \x10 [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3075 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [13] -> \x10 [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3076 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [14] -> \x10 [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3077 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [15] -> \x10 [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3078 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [16] -> \x10 [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3079 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [17] -> \x10 [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3080 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [18] -> \x10 [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3081 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [19] -> \x10 [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3082 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [20] -> \x10 [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3083 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [21] -> \x10 [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3084 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [22] -> \x10 [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3085 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [23] -> \x10 [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3086 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [24] -> \x10 [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3087 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [25] -> \x10 [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3088 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [26] -> \x10 [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3089 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [27] -> \x10 [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3090 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [28] -> \x10 [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3091 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [29] -> \x10 [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3092 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [30] -> \x10 [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3093 to $_DFFE_PP_ for $auto$rtlil.cc:1906:Mux$1369 [31] -> \x10 [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3239 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [0] -> \regfile[26] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3240 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [1] -> \regfile[26] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3241 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [2] -> \regfile[26] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3242 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [3] -> \regfile[26] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3243 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [4] -> \regfile[26] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3244 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [5] -> \regfile[26] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3245 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [6] -> \regfile[26] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3246 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [7] -> \regfile[26] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3247 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [8] -> \regfile[26] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3248 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [9] -> \regfile[26] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3249 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [10] -> \regfile[26] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3250 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [11] -> \regfile[26] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3251 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [12] -> \regfile[26] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3252 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [13] -> \regfile[26] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3253 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [14] -> \regfile[26] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3254 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [15] -> \regfile[26] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3255 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [16] -> \regfile[26] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3256 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [17] -> \regfile[26] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3257 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [18] -> \regfile[26] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3258 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [19] -> \regfile[26] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3259 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [20] -> \regfile[26] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3260 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [21] -> \regfile[26] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3261 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [22] -> \regfile[26] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3262 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [23] -> \regfile[26] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3263 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [24] -> \regfile[26] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3264 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [25] -> \regfile[26] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3265 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [26] -> \regfile[26] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3266 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [27] -> \regfile[26] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3267 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [28] -> \regfile[26] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3268 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [29] -> \regfile[26] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3269 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [30] -> \regfile[26] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3270 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1860 [31] -> \regfile[26] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4037 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [0] -> \regfile[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4038 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [1] -> \regfile[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4039 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [2] -> \regfile[1] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4040 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [3] -> \regfile[1] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4041 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [4] -> \regfile[1] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4042 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [5] -> \regfile[1] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4043 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [6] -> \regfile[1] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4044 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [7] -> \regfile[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4045 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [8] -> \regfile[1] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4046 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [9] -> \regfile[1] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4047 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [10] -> \regfile[1] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4048 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [11] -> \regfile[1] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4049 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [12] -> \regfile[1] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4050 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [13] -> \regfile[1] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4051 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [14] -> \regfile[1] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4052 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [15] -> \regfile[1] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4053 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [16] -> \regfile[1] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4054 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [17] -> \regfile[1] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4055 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [18] -> \regfile[1] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4056 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [19] -> \regfile[1] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4057 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [20] -> \regfile[1] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4058 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [21] -> \regfile[1] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4059 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [22] -> \regfile[1] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4060 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [23] -> \regfile[1] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4061 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [24] -> \regfile[1] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4062 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [25] -> \regfile[1] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4063 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [26] -> \regfile[1] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4064 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [27] -> \regfile[1] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4065 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [28] -> \regfile[1] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4066 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [29] -> \regfile[1] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4067 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [30] -> \regfile[1] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4068 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1680 [31] -> \regfile[1] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4069 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [0] -> \regfile[9] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4070 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [1] -> \regfile[9] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4071 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [2] -> \regfile[9] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4072 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [3] -> \regfile[9] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4073 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [4] -> \regfile[9] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4074 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [5] -> \regfile[9] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4075 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [6] -> \regfile[9] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4076 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [7] -> \regfile[9] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4077 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [8] -> \regfile[9] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4078 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [9] -> \regfile[9] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4079 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [10] -> \regfile[9] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4080 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [11] -> \regfile[9] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4081 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [12] -> \regfile[9] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4082 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [13] -> \regfile[9] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4083 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [14] -> \regfile[9] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4084 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [15] -> \regfile[9] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4085 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [16] -> \regfile[9] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4086 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [17] -> \regfile[9] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4087 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [18] -> \regfile[9] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4088 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [19] -> \regfile[9] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4089 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [20] -> \regfile[9] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4090 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [21] -> \regfile[9] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4091 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [22] -> \regfile[9] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4092 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [23] -> \regfile[9] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4093 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [24] -> \regfile[9] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4094 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [25] -> \regfile[9] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4095 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [26] -> \regfile[9] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4096 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [27] -> \regfile[9] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4097 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [28] -> \regfile[9] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4098 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [29] -> \regfile[9] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4099 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [30] -> \regfile[9] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4100 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1744 [31] -> \regfile[9] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4102 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [0] -> \regfile[20] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4103 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [1] -> \regfile[20] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4104 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [2] -> \regfile[20] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4105 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [3] -> \regfile[20] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4106 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [4] -> \regfile[20] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4107 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [5] -> \regfile[20] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4108 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [6] -> \regfile[20] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4109 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [7] -> \regfile[20] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4110 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [8] -> \regfile[20] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4111 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [9] -> \regfile[20] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4112 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [10] -> \regfile[20] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4113 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [11] -> \regfile[20] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4114 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [12] -> \regfile[20] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4115 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [13] -> \regfile[20] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4116 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [14] -> \regfile[20] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4117 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [15] -> \regfile[20] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4118 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [16] -> \regfile[20] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4119 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [17] -> \regfile[20] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4120 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [18] -> \regfile[20] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4121 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [19] -> \regfile[20] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4122 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [20] -> \regfile[20] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4123 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [21] -> \regfile[20] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4124 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [22] -> \regfile[20] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4125 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [23] -> \regfile[20] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4126 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [24] -> \regfile[20] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4127 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [25] -> \regfile[20] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4128 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [26] -> \regfile[20] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4129 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [27] -> \regfile[20] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4130 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [28] -> \regfile[20] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4131 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [29] -> \regfile[20] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4132 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [30] -> \regfile[20] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4133 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1820 [31] -> \regfile[20] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4142 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [0] -> \regfile[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4143 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [1] -> \regfile[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4144 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [2] -> \regfile[0] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4145 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [3] -> \regfile[0] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4146 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [4] -> \regfile[0] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4147 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [5] -> \regfile[0] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4148 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [6] -> \regfile[0] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4149 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [7] -> \regfile[0] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4150 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [8] -> \regfile[0] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4151 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [9] -> \regfile[0] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4152 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [10] -> \regfile[0] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4153 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [11] -> \regfile[0] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4154 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [12] -> \regfile[0] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4155 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [13] -> \regfile[0] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4156 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [14] -> \regfile[0] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4157 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [15] -> \regfile[0] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4158 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [16] -> \regfile[0] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4159 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [17] -> \regfile[0] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4160 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [18] -> \regfile[0] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4161 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [19] -> \regfile[0] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4162 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [20] -> \regfile[0] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4163 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [21] -> \regfile[0] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4164 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [22] -> \regfile[0] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4165 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [23] -> \regfile[0] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4166 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [24] -> \regfile[0] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4167 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [25] -> \regfile[0] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4168 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [26] -> \regfile[0] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4169 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [27] -> \regfile[0] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4170 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [28] -> \regfile[0] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4171 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [29] -> \regfile[0] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4172 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [30] -> \regfile[0] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4173 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1670 [31] -> \regfile[0] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4247 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [0] -> \regfile[16] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4248 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [1] -> \regfile[16] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4249 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [2] -> \regfile[16] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4250 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [3] -> \regfile[16] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4251 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [4] -> \regfile[16] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4252 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [5] -> \regfile[16] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4253 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [6] -> \regfile[16] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4254 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [7] -> \regfile[16] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4255 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [8] -> \regfile[16] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4256 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [9] -> \regfile[16] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4257 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [10] -> \regfile[16] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4258 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [11] -> \regfile[16] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4259 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [12] -> \regfile[16] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4260 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [13] -> \regfile[16] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4261 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [14] -> \regfile[16] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4262 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [15] -> \regfile[16] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4263 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [16] -> \regfile[16] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4264 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [17] -> \regfile[16] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4265 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [18] -> \regfile[16] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4266 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [19] -> \regfile[16] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4267 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [20] -> \regfile[16] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4268 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [21] -> \regfile[16] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4269 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [22] -> \regfile[16] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4270 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [23] -> \regfile[16] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4271 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [24] -> \regfile[16] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4272 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [25] -> \regfile[16] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4273 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [26] -> \regfile[16] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4274 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [27] -> \regfile[16] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4275 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [28] -> \regfile[16] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4276 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [29] -> \regfile[16] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4277 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [30] -> \regfile[16] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4278 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1794 [31] -> \regfile[16] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4438 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [0] -> \regfile[14] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4439 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [1] -> \regfile[14] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4440 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [2] -> \regfile[14] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4441 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [3] -> \regfile[14] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4442 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [4] -> \regfile[14] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4443 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [5] -> \regfile[14] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4444 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [6] -> \regfile[14] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4445 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [7] -> \regfile[14] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4446 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [8] -> \regfile[14] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4447 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [9] -> \regfile[14] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4448 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [10] -> \regfile[14] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4449 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [11] -> \regfile[14] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4450 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [12] -> \regfile[14] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4451 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [13] -> \regfile[14] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4452 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [14] -> \regfile[14] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4453 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [15] -> \regfile[14] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4454 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [16] -> \regfile[14] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4455 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [17] -> \regfile[14] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4456 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [18] -> \regfile[14] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4457 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [19] -> \regfile[14] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4458 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [20] -> \regfile[14] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4459 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [21] -> \regfile[14] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4460 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [22] -> \regfile[14] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4461 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [23] -> \regfile[14] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4462 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [24] -> \regfile[14] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4463 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [25] -> \regfile[14] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4464 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [26] -> \regfile[14] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4465 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [27] -> \regfile[14] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4466 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [28] -> \regfile[14] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4467 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [29] -> \regfile[14] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4468 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [30] -> \regfile[14] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4469 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1776 [31] -> \regfile[14] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5476 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [0] -> \regfile[4] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5477 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [1] -> \regfile[4] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5478 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [2] -> \regfile[4] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5479 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [3] -> \regfile[4] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5480 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [4] -> \regfile[4] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5481 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [5] -> \regfile[4] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5482 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [6] -> \regfile[4] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5483 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [7] -> \regfile[4] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5484 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [8] -> \regfile[4] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5485 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [9] -> \regfile[4] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5486 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [10] -> \regfile[4] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5487 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [11] -> \regfile[4] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5488 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [12] -> \regfile[4] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5489 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [13] -> \regfile[4] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5490 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [14] -> \regfile[4] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5491 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [15] -> \regfile[4] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5492 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [16] -> \regfile[4] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5493 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [17] -> \regfile[4] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5494 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [18] -> \regfile[4] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5495 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [19] -> \regfile[4] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5496 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [20] -> \regfile[4] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5497 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [21] -> \regfile[4] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5498 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [22] -> \regfile[4] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5499 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [23] -> \regfile[4] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5500 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [24] -> \regfile[4] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5501 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [25] -> \regfile[4] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5502 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [26] -> \regfile[4] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5503 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [27] -> \regfile[4] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5504 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [28] -> \regfile[4] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5505 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [29] -> \regfile[4] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5506 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [30] -> \regfile[4] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5507 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1708 [31] -> \regfile[4] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5784 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [0] -> \regfile[11] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5785 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [1] -> \regfile[11] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5786 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [2] -> \regfile[11] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5787 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [3] -> \regfile[11] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5788 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [4] -> \regfile[11] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5789 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [5] -> \regfile[11] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5790 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [6] -> \regfile[11] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5791 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [7] -> \regfile[11] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5792 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [8] -> \regfile[11] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5793 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [9] -> \regfile[11] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5794 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [10] -> \regfile[11] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5795 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [11] -> \regfile[11] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5796 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [12] -> \regfile[11] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5797 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [13] -> \regfile[11] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5798 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [14] -> \regfile[11] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5799 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [15] -> \regfile[11] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5800 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [16] -> \regfile[11] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5801 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [17] -> \regfile[11] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5802 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [18] -> \regfile[11] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5803 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [19] -> \regfile[11] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5804 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [20] -> \regfile[11] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5805 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [21] -> \regfile[11] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5806 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [22] -> \regfile[11] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5807 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [23] -> \regfile[11] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5808 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [24] -> \regfile[11] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5809 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [25] -> \regfile[11] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5810 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [26] -> \regfile[11] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5811 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [27] -> \regfile[11] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5812 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [28] -> \regfile[11] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5813 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [29] -> \regfile[11] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5814 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [30] -> \regfile[11] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5815 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1756 [31] -> \regfile[11] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6568 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [0] -> \regfile[29] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6569 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [1] -> \regfile[29] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6570 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [2] -> \regfile[29] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6571 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [3] -> \regfile[29] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6572 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [4] -> \regfile[29] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6573 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [5] -> \regfile[29] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6574 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [6] -> \regfile[29] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6575 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [7] -> \regfile[29] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6576 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [8] -> \regfile[29] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6577 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [9] -> \regfile[29] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6578 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [10] -> \regfile[29] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6579 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [11] -> \regfile[29] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6580 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [12] -> \regfile[29] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6581 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [13] -> \regfile[29] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6582 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [14] -> \regfile[29] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6583 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [15] -> \regfile[29] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6584 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [16] -> \regfile[29] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6585 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [17] -> \regfile[29] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6586 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [18] -> \regfile[29] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6587 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [19] -> \regfile[29] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6588 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [20] -> \regfile[29] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6589 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [21] -> \regfile[29] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6590 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [22] -> \regfile[29] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6591 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [23] -> \regfile[29] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6592 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [24] -> \regfile[29] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6593 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [25] -> \regfile[29] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6594 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [26] -> \regfile[29] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6595 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [27] -> \regfile[29] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6596 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [28] -> \regfile[29] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6597 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [29] -> \regfile[29] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6598 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [30] -> \regfile[29] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6599 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1880 [31] -> \regfile[29] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7004 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [0] -> \regfile[15] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7005 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [1] -> \regfile[15] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7006 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [2] -> \regfile[15] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7007 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [3] -> \regfile[15] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7008 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [4] -> \regfile[15] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7009 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [5] -> \regfile[15] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7010 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [6] -> \regfile[15] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7011 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [7] -> \regfile[15] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7012 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [8] -> \regfile[15] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7013 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [9] -> \regfile[15] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7014 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [10] -> \regfile[15] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7015 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [11] -> \regfile[15] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7016 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [12] -> \regfile[15] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7017 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [13] -> \regfile[15] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7018 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [14] -> \regfile[15] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7019 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [15] -> \regfile[15] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7020 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [16] -> \regfile[15] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7021 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [17] -> \regfile[15] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7022 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [18] -> \regfile[15] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7023 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [19] -> \regfile[15] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7024 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [20] -> \regfile[15] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7025 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [21] -> \regfile[15] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7026 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [22] -> \regfile[15] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7027 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [23] -> \regfile[15] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7028 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [24] -> \regfile[15] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7029 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [25] -> \regfile[15] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7030 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [26] -> \regfile[15] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7031 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [27] -> \regfile[15] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7032 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [28] -> \regfile[15] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7033 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [29] -> \regfile[15] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7034 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [30] -> \regfile[15] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$7035 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1782 [31] -> \regfile[15] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8128 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [0] -> \regfile[22] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8129 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [1] -> \regfile[22] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8130 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [2] -> \regfile[22] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8131 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [3] -> \regfile[22] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8132 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [4] -> \regfile[22] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8133 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [5] -> \regfile[22] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8134 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [6] -> \regfile[22] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8135 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [7] -> \regfile[22] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8136 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [8] -> \regfile[22] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8137 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [9] -> \regfile[22] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8138 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [10] -> \regfile[22] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8139 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [11] -> \regfile[22] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8140 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [12] -> \regfile[22] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8141 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [13] -> \regfile[22] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8142 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [14] -> \regfile[22] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8143 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [15] -> \regfile[22] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8144 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [16] -> \regfile[22] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8145 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [17] -> \regfile[22] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8146 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [18] -> \regfile[22] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8147 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [19] -> \regfile[22] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8148 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [20] -> \regfile[22] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8149 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [21] -> \regfile[22] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8150 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [22] -> \regfile[22] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8151 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [23] -> \regfile[22] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8152 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [24] -> \regfile[22] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8153 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [25] -> \regfile[22] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8154 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [26] -> \regfile[22] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8155 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [27] -> \regfile[22] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8156 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [28] -> \regfile[22] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8157 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [29] -> \regfile[22] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8158 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [30] -> \regfile[22] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8159 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1832 [31] -> \regfile[22] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8770 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [0] -> \regfile[12] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8771 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [1] -> \regfile[12] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8772 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [2] -> \regfile[12] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8773 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [3] -> \regfile[12] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8774 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [4] -> \regfile[12] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8775 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [5] -> \regfile[12] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8776 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [6] -> \regfile[12] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8777 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [7] -> \regfile[12] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8778 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [8] -> \regfile[12] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8779 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [9] -> \regfile[12] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8780 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [10] -> \regfile[12] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8781 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [11] -> \regfile[12] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8782 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [12] -> \regfile[12] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8783 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [13] -> \regfile[12] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8784 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [14] -> \regfile[12] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8785 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [15] -> \regfile[12] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8786 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [16] -> \regfile[12] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8787 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [17] -> \regfile[12] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8788 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [18] -> \regfile[12] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8789 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [19] -> \regfile[12] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8790 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [20] -> \regfile[12] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8791 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [21] -> \regfile[12] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8792 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [22] -> \regfile[12] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8793 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [23] -> \regfile[12] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8794 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [24] -> \regfile[12] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8795 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [25] -> \regfile[12] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8796 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [26] -> \regfile[12] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8797 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [27] -> \regfile[12] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8798 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [28] -> \regfile[12] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8799 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [29] -> \regfile[12] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8800 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [30] -> \regfile[12] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8801 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1764 [31] -> \regfile[12] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9757 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [0] -> \regfile[8] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9758 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [1] -> \regfile[8] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9759 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [2] -> \regfile[8] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9760 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [3] -> \regfile[8] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9761 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [4] -> \regfile[8] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9762 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [5] -> \regfile[8] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9763 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [6] -> \regfile[8] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9764 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [7] -> \regfile[8] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9765 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [8] -> \regfile[8] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9766 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [9] -> \regfile[8] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9767 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [10] -> \regfile[8] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9768 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [11] -> \regfile[8] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9769 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [12] -> \regfile[8] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9770 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [13] -> \regfile[8] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9771 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [14] -> \regfile[8] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9772 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [15] -> \regfile[8] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9773 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [16] -> \regfile[8] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9774 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [17] -> \regfile[8] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9775 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [18] -> \regfile[8] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9776 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [19] -> \regfile[8] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9777 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [20] -> \regfile[8] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9778 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [21] -> \regfile[8] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9779 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [22] -> \regfile[8] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9780 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [23] -> \regfile[8] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9781 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [24] -> \regfile[8] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9782 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [25] -> \regfile[8] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9783 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [26] -> \regfile[8] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9784 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [27] -> \regfile[8] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9785 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [28] -> \regfile[8] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9786 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [29] -> \regfile[8] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9787 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [30] -> \regfile[8] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9788 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1738 [31] -> \regfile[8] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9826 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [0] -> \regfile[30] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9827 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [1] -> \regfile[30] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9828 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [2] -> \regfile[30] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9829 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [3] -> \regfile[30] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9830 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [4] -> \regfile[30] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9831 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [5] -> \regfile[30] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9832 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [6] -> \regfile[30] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9833 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [7] -> \regfile[30] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9834 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [8] -> \regfile[30] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9835 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [9] -> \regfile[30] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9836 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [10] -> \regfile[30] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9837 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [11] -> \regfile[30] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9838 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [12] -> \regfile[30] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9839 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [13] -> \regfile[30] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9840 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [14] -> \regfile[30] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9841 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [15] -> \regfile[30] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9842 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [16] -> \regfile[30] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9843 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [17] -> \regfile[30] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9844 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [18] -> \regfile[30] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9845 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [19] -> \regfile[30] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9846 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [20] -> \regfile[30] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9847 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [21] -> \regfile[30] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9848 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [22] -> \regfile[30] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9849 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [23] -> \regfile[30] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9850 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [24] -> \regfile[30] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9851 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [25] -> \regfile[30] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9852 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [26] -> \regfile[30] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9853 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [27] -> \regfile[30] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9854 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [28] -> \regfile[30] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9855 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [29] -> \regfile[30] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9856 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [30] -> \regfile[30] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9857 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1886 [31] -> \regfile[30] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9935 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [0] -> \regfile[10] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9936 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [1] -> \regfile[10] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9937 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [2] -> \regfile[10] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9938 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [3] -> \regfile[10] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9939 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [4] -> \regfile[10] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9940 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [5] -> \regfile[10] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9941 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [6] -> \regfile[10] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9942 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [7] -> \regfile[10] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9943 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [8] -> \regfile[10] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9944 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [9] -> \regfile[10] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9945 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [10] -> \regfile[10] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9946 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [11] -> \regfile[10] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9947 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [12] -> \regfile[10] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9948 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [13] -> \regfile[10] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9949 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [14] -> \regfile[10] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9950 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [15] -> \regfile[10] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9951 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [16] -> \regfile[10] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9952 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [17] -> \regfile[10] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9953 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [18] -> \regfile[10] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9954 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [19] -> \regfile[10] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9955 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [20] -> \regfile[10] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9956 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [21] -> \regfile[10] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9957 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [22] -> \regfile[10] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9958 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [23] -> \regfile[10] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9959 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [24] -> \regfile[10] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9960 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [25] -> \regfile[10] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9961 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [26] -> \regfile[10] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9962 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [27] -> \regfile[10] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9963 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [28] -> \regfile[10] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9964 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [29] -> \regfile[10] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9965 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [30] -> \regfile[10] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9966 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1750 [31] -> \regfile[10] [31].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~1288 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2278 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in nerv.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in nerv.
  Merging $auto$simplemap.cc:277:simplemap_mux$4351 (A=\npc [1], B=1'0, S=$logic_or$nerv.sv:414$83_Y) into $auto$simplemap.cc:420:simplemap_dff$10105 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4350 (A=\npc [0], B=1'0, S=$logic_or$nerv.sv:414$83_Y) into $auto$simplemap.cc:420:simplemap_dff$10104 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2111 (A=1'0, B=\pc [0], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10170 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2112 (A=1'0, B=\pc [1], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10171 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2113 (A=1'0, B=\pc [2], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10172 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2114 (A=1'0, B=\pc [3], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10173 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2115 (A=1'0, B=\pc [4], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10174 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2116 (A=1'0, B=\pc [5], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10175 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2117 (A=1'0, B=\pc [6], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10176 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2118 (A=1'0, B=\pc [7], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10177 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2120 (A=1'0, B=\pc [9], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10179 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2121 (A=1'0, B=\pc [10], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10180 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2122 (A=1'0, B=\pc [11], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10181 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2123 (A=1'0, B=\pc [12], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10182 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2124 (A=1'0, B=\pc [13], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10183 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2125 (A=1'0, B=\pc [14], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10184 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2126 (A=1'0, B=\pc [15], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10185 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2127 (A=1'0, B=\pc [16], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10186 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2128 (A=1'0, B=\pc [17], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10187 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2129 (A=1'0, B=\pc [18], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10188 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2130 (A=1'0, B=\pc [19], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10189 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2131 (A=1'0, B=\pc [20], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10190 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2132 (A=1'0, B=\pc [21], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10191 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2133 (A=1'0, B=\pc [22], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10192 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2134 (A=1'0, B=\pc [23], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10193 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2135 (A=1'0, B=\pc [24], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10194 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2136 (A=1'0, B=\pc [25], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10195 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2137 (A=1'0, B=\pc [26], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10196 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2138 (A=1'0, B=\pc [27], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10197 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2139 (A=1'0, B=\pc [28], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10198 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2140 (A=1'0, B=\pc [29], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10199 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2141 (A=1'0, B=\pc [30], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10200 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2142 (A=1'0, B=\pc [31], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10201 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2015 (A=\imem_data [0], B=1'1, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10202 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2016 (A=\imem_data [1], B=1'1, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10203 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2017 (A=\imem_data [2], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10204 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2018 (A=\imem_data [3], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10205 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2019 (A=\imem_data [4], B=1'1, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10206 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2020 (A=\imem_data [5], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10207 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2119 (A=1'0, B=\pc [8], S=$auto$rtlil.cc:1864:Xor$1211) into $auto$simplemap.cc:420:simplemap_dff$10178 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2021 (A=\imem_data [6], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10208 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2024 (A=\imem_data [9], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10211 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2025 (A=\imem_data [10], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10212 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2026 (A=\imem_data [11], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10213 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2028 (A=\imem_data [13], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10215 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2030 (A=\imem_data [15], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10217 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2031 (A=\imem_data [16], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10218 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2032 (A=\imem_data [17], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10219 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2033 (A=\imem_data [18], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10220 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2034 (A=\imem_data [19], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10221 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2035 (A=\imem_data [20], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10222 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2036 (A=\imem_data [21], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10223 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2037 (A=\imem_data [22], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2038 (A=\imem_data [23], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10225 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2039 (A=\imem_data [24], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10226 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2040 (A=\imem_data [25], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2041 (A=\imem_data [26], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2042 (A=\imem_data [27], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2043 (A=\imem_data [28], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10230 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2044 (A=\imem_data [29], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10231 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2045 (A=\imem_data [30], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10232 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2046 (A=\imem_data [31], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10233 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2023 (A=\imem_data [8], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10210 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$4470 (A=$logic_and$nerv.sv:423$88_Y, B=1'1, S=$1\mem_rd_enable[0:0]) into $auto$simplemap.cc:420:simplemap_dff$10357 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$9858 (A=1'0, B=$2\j_b_check[0:0], S=$logic_and$nerv.sv:263$29_Y) into $auto$simplemap.cc:420:simplemap_dff$10356 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2022 (A=\imem_data [7], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10209 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$10103 (A=\mem_rd_enable, B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$10390 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2027 (A=\imem_data [12], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10214 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2029 (A=\imem_data [14], B=1'0, S=\stall_cond_IF) into $auto$simplemap.cc:420:simplemap_dff$10216 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~261 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~657 debug messages>
Removed a total of 219 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 68 unused cells and 7428 unused wires.
<suppressed ~71 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\nerv' to `<abc-temp-dir>/input.blif'..
Extracted 6045 gates and 7569 wires to a netlist network with 1522 inputs and 429 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =    1224.
ABC: Participating nodes from both networks       =    2541.
ABC: Participating nodes from the first network   =    1234. (  36.54 % of nodes)
ABC: Participating nodes from the second network  =    1307. (  38.70 % of nodes)
ABC: Node pairs (any polarity)                    =    1233. (  36.51 % of names can be moved)
ABC: Node pairs (same polarity)                   =     800. (  23.69 % of names can be moved)
ABC: Total runtime =     0.17 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     6752
ABC RESULTS:        internal signals:     5618
ABC RESULTS:           input signals:     1522
ABC RESULTS:          output signals:      429
Removing temp directory.
Removed 1 unused cells and 2490 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001110001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001111110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011011111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
No more expansions possible.
<suppressed ~5191 debug messages>
Removed 0 unused cells and 6752 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \nerv

2.43.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.44. Printing statistics.

=== nerv ===

   Number of wires:               3419
   Number of wire bits:           5838
   Number of public wires:          90
   Number of public wire bits:    1982
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5282
     SB_CARRY                      368
     SB_DFF                        132
     SB_DFFE                      1086
     SB_DFFESR                       2
     SB_DFFSR                       63
     SB_DFFSS                        4
     SB_LUT4                      3627

2.45. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.46. Executing JSON backend.

End of script. Logfile hash: 27d47059da
CPU: user 8.89s system 0.18s, MEM: 56.02 MB total, 49.52 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 22% 18x opt_merge (2 sec), 22% 27x opt_expr (2 sec), ...
